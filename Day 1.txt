GITHUB


GIT:- version control system  ---> Local system or local storage 
			
			git commands



GITHUB:- Collobration Tool Environment --> cloud storage 


git use local system code into cloud platform storage 




ðŸ—“ Week 1: Git Basics & Local Version Control
ðŸ“Œ Goal: Understand Git fundamentals & manage changes locally.

âœ… Install Git & configure (git config --global user.name "Your Name")
âœ… Create a local repo (git init)
âœ… Track changes (git add, git commit)
âœ… View commit history (git log, git status)
âœ… Undo changes (git checkout, git reset, git revert)

ðŸ›  Practice Task:

Create a small project, make changes, and track them using commits.

ðŸ—“ Week 2: Branching, Merging & Collaboration
ðŸ“Œ Goal: Learn how to work on features independently & merge code.
âœ… Create & switch branches (git checkout -b feature-branch)
âœ… Merge branches (git merge feature-branch)
âœ… Delete branches (git branch -d feature-branch)
âœ… Understand merge conflicts & resolve them manually
âœ… Use git stash to save unfinished work

ðŸ›  Practice Task:

Implement a feature in a new branch, merge it into main, and resolve any conflicts.
ðŸ—“ Week 3: GitHub, Remote Repositories & PRs
ðŸ“Œ Goal: Push code to GitHub & collaborate with others.
âœ… Clone a repository (git clone <repo-url>)
âœ… Link local repo to GitHub (git remote add origin <repo-url>)
âœ… Push & pull changes (git push origin branch, git pull origin main)
âœ… Create a fork & make a pull request (PR)
âœ… Review & approve PRs

ðŸ›  Practice Task:

Each developer forks the project, creates a feature branch, pushes changes, and submits a PR.
ðŸ—“ Week 4: Advanced Git & Best Practices
ðŸ“Œ Goal: Improve Git workflow & adopt best practices.
âœ… Interactive rebase (git rebase -i HEAD~3)
âœ… Squash commits into a single commit (git rebase -i)
âœ… Reset vs. Revert (git reset --hard HEAD~1, git revert HEAD)
âœ… Git tags & versioning (git tag -a v1.0 -m "Version 1.0")
âœ… Set up branch protection rules on GitHub
âœ… GitHub Actions for automation

ðŸ›  Practice Task:

Create tags for releases, squash commits, and set up a protected main branch.
ðŸŽ¯ Final Project & Review
ðŸ“Œ Apply all skills in a real-world scenario
âœ… Assign a team project where each developer works on a different feature.
âœ… Use branches, pull requests, and code reviews effectively.
âœ… Resolve merge conflicts & follow Git best practices.
âœ… Deploy the final version & tag a release.



main -->   team lead


1-> repo clone 

git clone https://github.com/EthicalHackerJagadeesh/TechHat.git


2-> open folder 

cd TechHat



3-->

create a new branch 

git checkout -b Karthik/Frontend/ContactPage


4-> editing code

5-> add the code into the branch
 
 	git add .


6-> set commit Message 

	git commit -m "Contact Page Implemented"


7-> push the code into github branch

	git push --set-upstream origin Karthik/Frontend/ContactPage



8--> team can check the code before after merge to main branch

	whenever code merge to main branch 


9--> After that delete the brach on our local system

	git branch -d Karthik/Frontend/ContactPage 

					or 					-d -> delete , -D  --> force Delete

	git branch -D Karthik/Frontend/ContactPage



10--> get the main branch code into the local system

git pull origin main

